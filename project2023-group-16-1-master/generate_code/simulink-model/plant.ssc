component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos = {[0;0;0],'m'};       %Position:right
    v   = {[0;0;0], 'm/s' };   %Velocity:right
    a   = {[0;0;0], 'm/s^2' }; %Acceleration:right
    angle = {[0;0;0],'rad'};   %Angle:right
    w     = {[0;0;0],'rad/s'}; %Angular velocity:right
end

parameters
    m = {0.027,'kg'};       %Mass
    g = {9.81,'m/s^2'};     %Gravity
    d = {0.046,'m'};        %Arm length
    b = {1.9796e-9,'N/((rad/s)^2)'}; %Lift constant 
    k = {2.5383e-11,'N*m/((rad/s)^2)'};%Drag constant
    F = {0.25,'N*s/m'}      %Air friction coefficient
end

parameters(Access=private)    
    %Moment of inertia matrix
    Jx = {1.1463e-5,'kg*m^2'};
    Jy = {1.6993e-5,'kg*m^2'};
    Jz = {2.9944e-5,'kg*m^2'};
    J = [Jx,0,0;0,Jy,0;0,0,Jz];

    % Add time invariant parameters here 
end

variables(Access=private)
    % Add time variant variables here
    
    %Initilize internal variables
   
    theta = {0, 'rad'}
    phi = {0, 'rad'}
    psi = {0, 'rad'}
%     rot_x = {zeros(3,3), '1'}
%     rot_y = {zeros(3,3), '1'}
%     rot_z = {zeros(3,3), '1'}
    R_b_w = {zeros(3,3), '1'}
    A = {zeros(3,3), '1'}
    rot_speed = {zeros(4,1), 'rad/s'}
    Tx = {zeros(1,1), 'N*m'}
    Ty = {zeros(1,1), 'N*m'}
    Tz = {zeros(1,1), 'N*m'}
    T = {zeros(1,1), 'N'}



end

equations
    % Add all equations here 
    phi == angle(1) 
    theta == angle(2)
    psi == angle(3)
  
%    
%     %Rotation
%     rot_x == [1 0 0; 0 cos(phi) -sin(phi); 0 sin(phi) cos(phi)]; %roll = phi
%     rot_y == [cos(theta) 0 sin(theta); 0 1 0; -sin(theta) 0 cos(theta)]; % pitch=theta
%     rot_z == [cos(psi) -sin(psi) 0; sin(psi) cos(psi) 0; 0 0 1];
%     
%     %Rotation from body to world
% %     R_b_w == rot_x * rot_y * rot_z; 
 R_b_w == [cos(psi)*cos(theta), cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi), sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta);
cos(theta)*sin(psi), cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta), cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi);
        -sin(theta),                              cos(theta)*sin(phi),                              cos(phi)*cos(theta)]
    

    
    %Velocity and acceleration
    pos.der == v  
    v.der == a

    %Rotor speed
    rot_speed == sqrt(abs(ctrl/b)) % [4x1] vector
    %Unit analysis lift: rad/s=sqrt(N/x) --> sqrt(x)=sqrt(N)/(rad/s) --> x=N/((rad/s^2))

    %Translation dynamics in w.c.f
    T == ctrl(1) + ctrl(2) + ctrl(3) + ctrl(4)  %Thrust 
    m*a == -[0; 0; m*g] + R_b_w*[0; 0; T] - F*v

    %Torques
    Tx == d*cos(pi/4)*b*(-rot_speed(1)^2 - rot_speed(2)^2 + rot_speed(3)^2 + rot_speed(4)^2) 
    Ty == d*sin(pi/4)*b*(-rot_speed(1)^2 + rot_speed(2)^2 + rot_speed(3)^2 - rot_speed(4)^2)
    Tz == k*(-rot_speed(1)^2 - rot_speed(3)^2 + rot_speed(2)^2 + rot_speed(4)^2)
    %Unit analysis drag: N*m=x*(rad/s^2) --> x=N*m/(rad/s^2)

    %Angular velocity and acceleration
    

    %Equation of motion
    J*w.der == -cross(w,J*w) + [Tx; Ty; Tz]

    
    A == [1, (sin(phi)*sin(theta))/cos(theta), -(cos(phi)*sin(theta))/cos(theta);
         0,                         cos(phi),                          sin(phi);
         0,             -sin(phi)/cos(theta),               cos(phi)/cos(theta)]

    angle.der == A*w



    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % REPLACE/REMOVE ALL THESE EQUATIONS
%     pos == {[0;0;0],'m'};
%     v == {[0;0;0], 'm/s' };
%     a == {[0;0;0], 'm/s^2' };
%     angle == {[0;0;0],'rad'};
%     w == {[0;0;0],'rad/s'};
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
end